:<<eof

shell输入/输出重定向
    I/O重定向允许我们将命令的输入或输出重定向到文件中,以及将多个命令连接到一起作为管道
    大多数 UNIX 系统命令从你的终端接受输入并将所产生的输出发送回​​到您的终端。一个命令通常从一个叫标准输入的地方读取输入，默认情况下，这恰好是你的终端。同样，一个命令通常将其输出写入到标准输出，默认情况下，这也是你的终端。

重定向命令列表如下：
#命令    说明
command > file      将输出重定向到file
command < file      将输入重定向到file
command >> file	    将输出以追加的方式重定向到file
n > file	        将文件描述符为n的文件重定向到file
n >> file	        将文件描述符为n的文件以追加的方式重定向到file
n >& m	            将输出文件m和n合并
n <& m	            将输入文件m和n合并
<< tag              将开始标记tag和结束标记tag之间的内容作为输入
eof

:<<eof
标准输入,输出,错误:
    程序的结果,被称为标准输出或者stdout; 程序的状态以及错误信息,被称为标准错误或者stderr;
    一般情况下标准输出与键盘相连,程序从标准输入stdin中获取输入;输出与屏幕相连,stdout与stderr通常会输出到控制台上,但重定向允许我们改变输出的去向和输入的来源
eof

:<<eof
重定向标准输出:
    通过 > 或 >> 来重定向输出,可将输出目标从控制台转移到文件中,例
    原始:echo "hello world!"
    重定向后: echo "hello world!" > file.txt

注意: 使用 > 重定向操作会覆盖文件目标,若要追加内容需要使用 >> 重定向操作符
eof

:<<eof
重定向标准错误
    为了重定向stderr,我们必须引用文件描述符. shell将stdin,stdout,stderr分别作为文件描述符0,1和2的内部引用;
    因此可以使用符号2来重定向stderr,例如:
    echo "hello world!" 2> err_file.txt
eof

:<<eof
重定向标准输出和标准错误到同一个文件:
    echo "hello world" > all_file.txt 2>&1
    首先,将stdout重定向到all_file.txt中,然后使用2>&1将文件描述符2=>stderr重定向到文件描述1=>stdout中
    注意:重定向stderr必须总在重定向stdout之后放生
eof

:<<eof
重定向标准输入
    通过 < ,我们可以将stdin的来源从键盘改为文件,例如
    echo < file.txt
eof

:eof
命令分析:
    1. >/dev/null 2>&1
    可以将上面的命令拆为两个命令理解:
        1)将标准输出流1(文件描述符)重定向到/dev/null, /dev/null在Linux中是空的设备文件,所以向这个设备文件输入的内容也会丢失
        2)将错误输出流2(文件描述符)重定向到标准输出流1,而标准输出流已重定向到/dev/null,因此错误输出流也会被重定向到/dev/null中
        最终: >/dev/null 2>&1这个命令输出的全部内容都会被丢弃

    2. 2>&1 >/dev/null
    与前一个命令顺序相反, 2>&1先将错误输出重定向到标准输出,因此错误日志将被打印到控制台上,而后>/dev/null将标准输出重定向到空的设备文件,因此标准输出将丢失
eof
